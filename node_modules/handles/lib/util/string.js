var crypto = require('crypto');
var characterUtil = require('./character');

exports.isEmpty = function (string)
{
	return string.length === 0;
}

/**
 * Checks whether a String is not empty; useful for mapping to arrays.
 *
 * @param {String} string - the String to check to see if it is not empty
 * @returns {Boolean} - true if the String is not empty else false
 */
exports.isNotEmpty = function (string)
{
	return string.length > 0;
}

exports.isNumerical = function (string)
{
	for (var i = 0; i < string.length; i++)
	{
		if (!characterUtil.isNumerical(string.charAt(i)))
		{
			return false;
		}
	}

	return true;
}

exports.isAlphabetical = function (string)
{
	for (var i = 0; i < string.length; i++)
	{
		if (!characterUtil.isAlphabetical(string.charAt(i)))
		{
			return false;
		}
	}

	return true;
}

exports.isAlphanumerical = function (string)
{
	for (var i = 0; i < string.length; i++)
	{
		if (!characterUtil.isAlphanumerical(string.charAt(i)))
		{
			return false;
		}
	}

	return true;
}

exports.stripPunctuation = function (string)
{
	// TODO: optimise; too much concatenation
	var newString = '';

	for (var i = 0; i < string.length; i++)
	{
		if (!characterUtil.isPunctuational(string.charAt(i)))
		{
			newString += string.charAt(i);
		}
	}

	return newString;
}

/**
 * Hash a String with any given method; function serves to prevent repetition in
 * code, as util functions should.
 *
 * @param  {String} string       - the String to hash
 * @param  {String} [hashMethod] - the name of the hash method, defaults to sha1
 * @return {String}              - the resulting hash, in base64 (encoding may become a parameter)
 */
exports.hash = function (string, hashMethod)
{
	var hash = crypto.createHash(hashMethod || 'sha1');
	hash.update(string, 'utf8');
	return hash.digest('base64');
}
